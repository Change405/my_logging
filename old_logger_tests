package my_logging

import (
	"errors"
	"fmt"
	"os"
)

func noErrorTestRun(logLevel string) {
	fmt.Printf("Testing %s. Only %s or higher level logs should show.\n", logLevel, logLevel)
	SetLogLevel(logLevel)
	Debugf("Testing %s", logLevel)
	Infof("Testing %s", logLevel)
	Warningf("Testing %s", logLevel)
}

func withNilErrorTestRun(nilError error) {
	if nilError != nil {
		fmt.Println("Real error passed to withNilErrorTestRun")
		os.Exit(1)
	}
	fmt.Println("Testing nil error. No logs should show")
	SetLogLevel("DEBUG")
	DebugfError(nilError, "Testing %s", logLevel)
	InfofError(nilError, "Testing %s", logLevel)
	WarningfError(nilError, "Testing %s", logLevel)
	CriticalfError(nilError, "Testing %s", logLevel)
}

func withRealErrorTestRun(realError error, logLevel string) {
	if realError == nil {
		fmt.Println("Nil error passed to withRealErrorTestRun")
		os.Exit(1)
	}
	fmt.Printf("Testing real error at %s level. Only %s or higher level logs should show.\n", logLevel, logLevel)
	DebugfError(realError, "Testing %s", logLevel)
	InfofError(realError, "Testing %s", logLevel)
	WarningfError(realError, "Testing %s", logLevel)
}

func Test() {
	logFile := "./test_log.txt"

	fmt.Println("Setting log file test.txt in current working directory")
	SetLogFile(logFile)

	// Testing no error logging
	noErrorTestRun("DEBUG")
	noErrorTestRun("INFO")
	noErrorTestRun("WARNING")
	noErrorTestRun("CRITICAL")

	// Testing with nil error
	returnNil := func() error {
		return nil
	}
	nilError := returnNil()
	withNilErrorTestRun(nilError)

	// Testing with real error
	realError := errors.New("testing valid error. You should see me in both the console and file")
	withRealErrorTestRun(realError, "DEBUG")
	withRealErrorTestRun(realError, "INFO")
	withRealErrorTestRun(realError, "WARNING")

	// Testing critical error
	CriticalfError(realError, "Testing %s", "CRITICAL")

}
